# -*- coding: utf-8 -*-
"""Causal Impact 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDs5BX-Xutl5L6p1QSP4JHxv_gf6jBzD
"""

import streamlit as st
import pandas as pd
from causalimpact import CausalImpact
import matplotlib.pyplot as plt
from io import BytesIO

# Page config
st.set_page_config(page_title="Causal Impact Dashboard", layout="wide")
st.title("üìâ Causal Impact Analysis (Brand Pause)")

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv("dummy_data_ci.csv", parse_dates=["date"])
    return df

df = load_data()

# Validate columns
required_columns = {"date", "market", "conversions", "Paid Search", "Paid Social"}
if not required_columns.issubset(df.columns):
    st.error(f"Missing columns in CSV. Required: {required_columns}")
    st.stop()

# Input: pause date
pause_date = '2024-07-28'

# Input: market selection
markets = df["market"].unique()
selected_market = st.selectbox("üåç Select Market", markets)

# Filter and prepare data
df_m = df[df["market"] == selected_market].copy()
df_m = df_m[["date", "Paid Search", "Paid Social", "conversions"]]
df_m = df_m.set_index("date")

full_weeks = df_m.index.sort_values().unique()
pre_period = [full_weeks.min(), full_weeks[full_weeks < pd.to_datetime(pause_date)].max()]
post_period = [pd.to_datetime(pause_date), full_weeks.max()]

ci_data = df_m[["conversions", "Paid Search", "Paid Social"]]
impact = CausalImpact(ci_data, pre_period, post_period)

# Output
st.subheader("üìä Summary")
st.text(impact.summary())

st.subheader("üìù Report")
st.markdown(f"<pre>{impact.summary(output='report')}</pre>", unsafe_allow_html=True)

st.subheader("üìà Impact Plot")
fig = impact.plot(figsize=(10, 5))
# Check if the figure is valid before saving it
if fig is not None:
    buf = BytesIO()
    fig.savefig(buf, format="png", bbox_inches="tight")
    buf.seek(0)
    img_base64 = base64.b64encode(buf.read()).decode('utf-8')
    buf.close()
    plt.close()
else:
    print("Error: The plot figure is None. Could not save the plot.")
st.image(buf)
